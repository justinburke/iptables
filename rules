#!/bin/bash 
#
# $Id: rules,v 1.50 2012/02/08 01:25:20 root Exp root $
#
# Original inspiration from:
# http://www.sns.ias.edu/~jns/security/iptables/rules.html
# 
# Load appropriate modules.
if [ -d /lib/modules ]
then
   modprobe ip_tables 
   modprobe ip_conntrack 
   modprobe ip_conntrack_ftp 
fi

# These lines are here in case rules are already in place and the script is
# ever rerun on the fly.  We want to remove all rules and pre-exisiting user
# defined chains and zero the counters before we implement new rules. 
iptables -F 
iptables -X 
iptables -Z 
iptables -t nat -F

# Set up a default DROP policy for the built-in chains. 
# If we modify and re-run the script mid-session then (because we have a
# default DROP policy), what happens is that there is a small time period when
# packets are denied until the new rules are back in place. There is no period,
# however small, when packets we don't want are allowed. 
iptables -P INPUT DROP 
iptables -P FORWARD DROP 
iptables -P OUTPUT DROP 


# Setup a few chains to be used later on in function setrules().
iptables -N syn-flood 
iptables -N icmp-in 
iptables -N icmp-out 


## ============================================================ 
## Kernel flags 
# To dynamically change kernel parameters and variables on the fly you need 
# CONFIG_SYSCTL defined in your kernel. I would advise the following: 

# Disable response to ping. 
#/bin/echo "1" > /proc/sys/net/ipv4/icmp_echo_ignore_all 

# Disable response to broadcasts. 
# You don't want yourself becoming a Smurf amplifier. 
/bin/echo "1" > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts 

# Don't accept source routed packets. Attackers can use source routing to generate 
# traffic pretending to be from inside your network, but which is routed back along 
# the path from which it came, namely outside, so attackers can compromise your 
# network. Source routing is rarely used for legitimate purposes. 
/bin/echo "0" > /proc/sys/net/ipv4/conf/all/accept_source_route 

# Disable ICMP redirect acceptance. ICMP redirects can be used to alter your routing 
# tables, possibly to a bad end. 
for interface in /proc/sys/net/ipv4/conf/*/accept_redirects; do 
   /bin/echo "0" > ${interface} 
done 

# Enable bad error message protection. 
/bin/echo "1" > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses 

# Turn on reverse path filtering. This helps make sure that packets use 
# legitimate source addresses, by automatically rejecting incoming packets 
# if the routing table entry for their source address doesn't match the network 
# interface they're arriving on. This has security advantages because it prevents 
# so-called IP spoofing, however it can pose problems if you use asymmetric routing 
# (packets from you to a host take a different path than packets from that host to you) 
# or if you operate a non-routing host which has several IP addresses on different 
# interfaces. (Note - If you turn on IP forwarding, you will also get this). 
for interface in /proc/sys/net/ipv4/conf/*/rp_filter; do 
   /bin/echo "1" > ${interface} 
done 

# Log spoofed packets, source routed packets, redirect packets. 
#/bin/echo "1" > /proc/sys/net/ipv4/conf/all/log_martians 

# Make sure that IP forwarding is turned on. We need this for OpenVPN
# client-to-client visibility.
/bin/echo "1" > /proc/sys/net/ipv4/ip_forward 

# Note: With connection tracking, all fragments are reassembled before being 
# passed to the packet-filtering code so there is no ip_always_defrag switch as there 
# was in the 2.2 kernel.

byebyehackers()
{
   iptables -N unwelcome_addrs

   iptables -A unwelcome_addrs -s 12.172.201.0/24  -j REJECT
   iptables -A unwelcome_addrs -s 24.132.0.0/14    -j REJECT
   iptables -A unwelcome_addrs -s 24.192.0.0/14    -j REJECT
   iptables -A unwelcome_addrs -s 38.0.0.0/8       -j REJECT
   iptables -A unwelcome_addrs -s 49.0.0.0/8       -j REJECT
   iptables -A unwelcome_addrs -s 58.0.0.0/8       -j REJECT
   iptables -A unwelcome_addrs -s 59.0.0.0/8       -j REJECT
   iptables -A unwelcome_addrs -s 60.0.0.0/7       -j REJECT
   iptables -A unwelcome_addrs -s 62.0.0.0/8       -j REJECT
   iptables -A unwelcome_addrs -s 66.34.4.205      -j REJECT
   iptables -A unwelcome_addrs -s 77.0.0.0/8       -j REJECT
   iptables -A unwelcome_addrs -s 78.0.0.0/7       -j REJECT
   iptables -A unwelcome_addrs -s 80.0.0.0/4       -j REJECT
   iptables -A unwelcome_addrs -s 80.0.0.0/6       -j REJECT
   iptables -A unwelcome_addrs -s 84.0.0.0/8       -j REJECT
   iptables -A unwelcome_addrs -s 109.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 113.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 114.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 115.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 116.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 117.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 118.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 119.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 119.176.0.0/12   -j REJECT
   iptables -A unwelcome_addrs -s 120.192.0.0/16   -j REJECT
   iptables -A unwelcome_addrs -s 121.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 122.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 123.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 124.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 125.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 126.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 129.69.0.0/16    -j REJECT
   iptables -A unwelcome_addrs -s 129.70.0.0/16    -j REJECT
   iptables -A unwelcome_addrs -s 130.225.0.0/16   -j REJECT
   iptables -A unwelcome_addrs -s 130.226.0.0/15   -j REJECT
   iptables -A unwelcome_addrs -s 130.228.0.0/14   -j REJECT
   iptables -A unwelcome_addrs -s 130.232.0.0/13   -j REJECT
   iptables -A unwelcome_addrs -s 130.240.0.0/14   -j REJECT
   iptables -A unwelcome_addrs -s 130.244.0.0/16   -j REJECT
   iptables -A unwelcome_addrs -s 133.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 134.104.0.0/14   -j REJECT
   iptables -A unwelcome_addrs -s 134.108.0.0/15   -j REJECT
   iptables -A unwelcome_addrs -s 134.110.0.0/16   -j REJECT
   iptables -A unwelcome_addrs -s 134.91.0.0/16    -j REJECT
   iptables -A unwelcome_addrs -s 134.92.0.0/14    -j REJECT
   iptables -A unwelcome_addrs -s 134.96.0.0/13    -j REJECT
   iptables -A unwelcome_addrs -s 136.206.0.0/16   -j REJECT 
   iptables -A unwelcome_addrs -s 139.20.0.0/14    -j REJECT
   iptables -A unwelcome_addrs -s 139.24.0.0/14    -j REJECT
   iptables -A unwelcome_addrs -s 139.28.0.0/15    -j REJECT
   iptables -A unwelcome_addrs -s 140.109.0.0/16   -j REJECT 
   iptables -A unwelcome_addrs -s 140.110.0.0/15   -j REJECT 
   iptables -A unwelcome_addrs -s 140.112.0.0/12   -j REJECT 
   iptables -A unwelcome_addrs -s 140.128.0.0/13   -j REJECT 
   iptables -A unwelcome_addrs -s 140.136.0.0/15   -j REJECT 
   iptables -A unwelcome_addrs -s 140.138.0.0/16   -j REJECT 
   iptables -A unwelcome_addrs -s 141.0.0.0/10     -j REJECT
   iptables -A unwelcome_addrs -s 141.64.0.0/12    -j REJECT
   iptables -A unwelcome_addrs -s 141.80.0.0/14    -j REJECT
   iptables -A unwelcome_addrs -s 141.84.0.0/15    -j REJECT
   iptables -A unwelcome_addrs -s 145.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 146.48.0.0/16    -j REJECT
   iptables -A unwelcome_addrs -s 149.202.0.0/15   -j REJECT
   iptables -A unwelcome_addrs -s 149.204.0.0/16   -j REJECT
   iptables -A unwelcome_addrs -s 149.206.0.0/15   -j REJECT
   iptables -A unwelcome_addrs -s 149.208.0.0/12   -j REJECT
   iptables -A unwelcome_addrs -s 149.224.0.0/12   -j REJECT
   iptables -A unwelcome_addrs -s 149.240.0.0/13   -j REJECT
   iptables -A unwelcome_addrs -s 149.248.0.0/14   -j REJECT
   iptables -A unwelcome_addrs -s 150.254.0.0/16   -j REJECT
   iptables -A unwelcome_addrs -s 151.0.0.0/10     -j REJECT
   iptables -A unwelcome_addrs -s 151.100.0.0/16   -j REJECT
   iptables -A unwelcome_addrs -s 151.64.0.0/11    -j REJECT
   iptables -A unwelcome_addrs -s 151.96.0.0/14    -j REJECT
   iptables -A unwelcome_addrs -s 159.226.0.0/16   -j REJECT
   iptables -A unwelcome_addrs -s 160.216.0.0/14   -j REJECT
   iptables -A unwelcome_addrs -s 160.220.0.0/16   -j REJECT
   iptables -A unwelcome_addrs -s 160.44.0.0/14    -j REJECT
   iptables -A unwelcome_addrs -s 160.48.0.0/12    -j REJECT
   iptables -A unwelcome_addrs -s 163.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 164.0.0.0/11     -j REJECT
   iptables -A unwelcome_addrs -s 164.128.0.0/12   -j REJECT
   iptables -A unwelcome_addrs -s 164.32.0.0/13    -j REJECT
   iptables -A unwelcome_addrs -s 164.40.0.0/16    -j REJECT
   iptables -A unwelcome_addrs -s 165.76.0.0/16    -j REJECT
   iptables -A unwelcome_addrs -s 166.111.0.0/16   -j REJECT
   iptables -A unwelcome_addrs -s 169.208.0.0/12   -j REJECT
   iptables -A unwelcome_addrs -s 171.16.0.0/12    -j REJECT
   iptables -A unwelcome_addrs -s 171.32.0.0/15    -j REJECT
   iptables -A unwelcome_addrs -s 178.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 180.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 182.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 182.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 183.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 183.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 184.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 185.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 188.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 192.106.0.0/16   -j REJECT
   iptables -A unwelcome_addrs -s 192.109.0.0/16   -j REJECT
   iptables -A unwelcome_addrs -s 192.114.0.0/15   -j REJECT
   iptables -A unwelcome_addrs -s 192.116.0.0/15   -j REJECT
   iptables -A unwelcome_addrs -s 192.118.0.0/16   -j REJECT
   iptables -A unwelcome_addrs -s 192.162.0.0/16   -j REJECT
   iptables -A unwelcome_addrs -s 192.164.0.0/14   -j REJECT
   iptables -A unwelcome_addrs -s 192.71.0.0/16    -j REJECT
   iptables -A unwelcome_addrs -s 192.72.0.0/16    -j REJECT
   iptables -A unwelcome_addrs -s 193.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 194.0.0.0/7      -j REJECT
   iptables -A unwelcome_addrs -s 196.200.0.0/13   -j REJECT
   iptables -A unwelcome_addrs -s 198.17.117.0/24  -j REJECT
   iptables -A unwelcome_addrs -s 200.146.41/24    -j REJECT
   iptables -A unwelcome_addrs -s 200.158.0.0/17   -j REJECT 
   iptables -A unwelcome_addrs -s 200.251.200.0/24 -j REJECT 
   iptables -A unwelcome_addrs -s 200.62.128.0/18  -j REJECT 
   iptables -A unwelcome_addrs -s 200.75.0.0/19    -j REJECT 
   iptables -A unwelcome_addrs -s 201.0.0.0/12     -j REJECT
   iptables -A unwelcome_addrs -s 202.0.0.0/7      -j REJECT
   iptables -A unwelcome_addrs -s 207.58.128.0/18  -j REJECT
   iptables -A unwelcome_addrs -s 210.0.0.0/7      -j REJECT
   iptables -A unwelcome_addrs -s 212.0.0.0/7      -j REJECT
   iptables -A unwelcome_addrs -s 216.105.128.0/19 -j REJECT
   iptables -A unwelcome_addrs -s 217.0.0.0/8      -j REJECT
   iptables -A unwelcome_addrs -s 218.0.0.0/7      -j REJECT
   iptables -A unwelcome_addrs -s 220.0.0.0/6      -j REJECT
}


setrules()
{
   if [ -z "$IFACE" ]; then
      echo "\$IFACE is zero-length in setrules(). aborting."
      exit;
   fi

   echo -n "Configuring $IFACE ($IPADDR)... "

   ## ============================================================ 
   # RULES 

   ## SYN-FLOODING PROTECTION 
   # This rule maximises the rate of incoming connections. In order to do this
   # we divert tcp packets with the SYN bit set off to a user-defined chain. Up
   # to limit-burst connections can arrive in 1/limit seconds ..... in this case
   # 4 connections in one second. After this, one of the burst is regained every
   # second and connections are allowed again. The default limit is 3/hour. The
   # default limit burst is 5. 
   # 
#   iptables -A INPUT -i $IFACE -p tcp --syn -j syn-flood 
#   iptables -A syn-flood -m limit --limit 1/s --limit-burst 32 -j RETURN 
#   iptables -A syn-flood -j DROP 

   ## Make sure NEW tcp connections are SYN packets 
   iptables -A INPUT -i $IFACE -p tcp ! --syn -m state --state NEW -j DROP 

   ## SPOOFING 
   # Most of this anti-spoofing stuff is theoretically not really necessary with the flags we 
   # have set in the kernel above ........... but you never know there isn't a bug somewhere in 
   # your IP stack. 
   # 
   # Refuse spoofed packets pretending to be from your IP address. 
   iptables -A INPUT  -i $IFACE -s $IPADDR -j DROP 
   # Refuse packets claiming to be from a Class A private network. 
#   iptables -A INPUT  -i $IFACE -s $CLASS_A -j DROP 
   # Refuse packets claiming to be from a Class B private network. 
#   iptables -A INPUT  -i $IFACE -s $CLASS_B -j DROP 
   # Refuse packets claiming to be from a Class C private network. 
#   iptables -A INPUT  -i $IFACE -s $CLASS_C -j DROP 
   # Refuse Class D multicast addresses. Multicast is illegal as a source address. 
   iptables -A INPUT -i $IFACE -s $CLASS_D_MULTICAST -j DROP 
   # Refuse Class E reserved IP addresses. 
   iptables -A INPUT -i $IFACE -s $CLASS_E_RESERVED_NET -j DROP 
   # Refuse packets claiming to be to the loopback interface. 
   # Refusing packets claiming to be to the loopback interface protects against 
   # source quench, whereby a machine can be told to slow itself down by an icmp source 
   # quench to the loopback. 
   iptables -A INPUT -i $IFACE -d $LOOPBACK -j DROP 
   # Refuse broadcast address packets. 
   iptables -A INPUT -i $IFACE -d $BROADCAST -j DROP 

   ## =================================================================== 
   ## ICMP 
   # We prefilter icmp by pulling it off to user-dfined chains so that we can restrict which 
   # types are allowed from the beginning rather than leaving it to the connection tracking. 
   # For instance, we don't want redirects whatever happens. 
   # In case you hadn't realised, ICMP scares me ................... 
   # 
   #  0: echo reply (pong) 
   #  3: destination-unreachable (port-unreachable, fragmentation-needed etc). 
   #  4: source quench 
   #  5: redirect 
   #  8: echo request (ping) 
   #  9: router advertisement 
   # 10: router solicitation 
   # 11: time-exceeded 
   # 12: parameter-problem 
   # 13: timestamp request 
   # 14: timestamp reply 
   # 15: information request 
   # 16: information reply 
   # 17: address mask request 
   # 18: address mask reply 

   iptables -A INPUT  -i $IFACE -p icmp -j icmp-in 
   iptables -A OUTPUT -o $IFACE -p icmp -j icmp-out 

   # Accept 0,3,4,11,12,14,16,18 in. 
   iptables -A icmp-in -i $IFACE -p icmp --icmp-type 0  -s 0/0 -d $IPADDR -j RETURN 
   iptables -A icmp-in -i $IFACE -p icmp --icmp-type 3  -s 0/0 -d $IPADDR -j RETURN 
   iptables -A icmp-in -i $IFACE -p icmp --icmp-type 4  -s 0/0 -d $IPADDR -j RETURN 
   iptables -A icmp-in -i $IFACE -p icmp --icmp-type 11 -s 0/0 -d $IPADDR -j RETURN 
   iptables -A icmp-in -i $IFACE -p icmp --icmp-type 12 -s 0/0 -d $IPADDR -j RETURN 
   iptables -A icmp-in -i $IFACE -p icmp --icmp-type 14 -s 0/0 -d $IPADDR -j RETURN 
   iptables -A icmp-in -i $IFACE -p icmp --icmp-type 16 -s 0/0 -d $IPADDR -j RETURN 
   iptables -A icmp-in -i $IFACE -p icmp --icmp-type 18 -s 0/0 -d $IPADDR -j RETURN 

   # Allow pings from everywhere.
   iptables -A icmp-in -i $IFACE -p icmp --icmp-type 8  -s 0/0 -d $IPADDR -j ACCEPT

   # Allow 4,8,12,13,15,17 out. 
   iptables -A icmp-out -o $IFACE -p icmp --icmp-type 0  -s $IPADDR -d 0/0 -j RETURN 
   iptables -A icmp-out -o $IFACE -p icmp --icmp-type 3  -s $IPADDR -d 0/0 -j RETURN 
   iptables -A icmp-out -o $IFACE -p icmp --icmp-type 4  -s $IPADDR -d 0/0 -j RETURN 
   iptables -A icmp-out -o $IFACE -p icmp --icmp-type 8  -s $IPADDR -d 0/0 -j RETURN 
   iptables -A icmp-out -o $IFACE -p icmp --icmp-type 12 -s $IPADDR -d 0/0 -j RETURN 
   iptables -A icmp-out -o $IFACE -p icmp --icmp-type 13 -s $IPADDR -d 0/0 -j RETURN 
   iptables -A icmp-out -o $IFACE -p icmp --icmp-type 15 -s $IPADDR -d 0/0 -j RETURN 
   iptables -A icmp-out -o $IFACE -p icmp --icmp-type 17 -s $IPADDR -d 0/0 -j RETURN 

   # Any ICMP not already allowed is logged and then dropped. 
   iptables -A icmp-in  -i $IFACE -j LOG --log-prefix "IPTABLES ICMP-BAD-TYPE-IN: " 
   iptables -A icmp-in  -i $IFACE -j DROP 
   iptables -A icmp-out -o $IFACE -j LOG --log-prefix "IPTABLES ICMP-BAD-TYPE-OUT: " 
   iptables -A icmp-out -o $IFACE -j DROP 

   # Now we have returned from the icmp-in chain allowing only certain types 
   # of icmp inbound, we can accept it if it is related to other connections 
   # (e.g a time exceed from a traceroute) or part of an established one 
   # (e.g. an echo reply) 
   iptables -A INPUT  -i $IFACE -p icmp -m state --state ESTABLISHED,RELATED -j ACCEPT 
   # Now we have returned from the icmp-out chain allowing only certain types 
   # of icmp outbound, we can just accept it under all circumstances. 
   iptables -A OUTPUT -o $IFACE -p icmp -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT 
   # ==================================================================== 

   # Allow all outgoing connections and established incoming connections.
   iptables -A OUTPUT -o $IFACE -j ACCEPT 
   iptables -A INPUT  -i $IFACE -m state --state ESTABLISHED,RELATED -j ACCEPT 

   ## Hackers, be gone!
   # byebyehackers() will setup a chain called "unwelcome_addrs". Any connection
   # matches in that chain will be REJECTed. By default, all new connections will
   # filtered, but we can add individual exceptions (see example below).
   byebyehackers
   iptables -A INPUT -i $IFACE -m state --state NEW -j unwelcome_addrs
   # Add exception for UDP DNS
   iptables -I unwelcome_addrs -p udp --dport domain -m state --state NEW -j RETURN

   ## Internet services open to everyone
   iptables -A INPUT  -i $IFACE -p tcp --dport domain  -m state --state NEW -j ACCEPT
   iptables -A INPUT  -i $IFACE -p udp --dport domain  -m state --state NEW -j ACCEPT
   iptables -A INPUT  -i $IFACE -p tcp --dport http    -m state --state NEW -j ACCEPT 
   iptables -A INPUT  -i $IFACE -p tcp --dport https   -m state --state NEW -j ACCEPT 

   ## SSH 
   # Allow ssh inbound, but rate limited to slow brute-force attacks.
   iptables -N ssh_$IFACE
   iptables -A INPUT -i $IFACE -p tcp --dport ssh  -m state --state NEW -j ssh_$IFACE
   iptables -A ssh_$IFACE -s $CLASS_A    -j ACCEPT
   iptables -A ssh_$IFACE -s $CLASS_C    -j ACCEPT
   iptables -A ssh_$IFACE -m limit --limit 1/min --limit-burst 6 -j ACCEPT
   iptables -A ssh_$IFACE -j LOG --log-prefix "IPTABLES SSH: "
   iptables -A ssh_$IFACE -j DROP

   ## Misc drops/rejects without logging
   # SAMBA/CIFS on local network.
   iptables -A INPUT  -i $IFACE -p udp -s $IPADDR/24 --dport 136:139 -m state --state NEW -j DROP
   # BOOTP
   iptables -A INPUT  -i $IFACE -p udp -d 255.255.255.255 --sport 67:68 --dport 67:68 -m state --state NEW -j DROP
   # UDP spam 
   iptables -A INPUT  -i $IFACE -p udp --sport 5353 --dport 5353 -m state --state NEW -j DROP
   # Multicast spam
   iptables -A INPUT  -i $IFACE -d 224.0.0.1 -m state --state NEW -j DROP

   ## LOGGING 
   # TODO rate-limit the logging using something like 
   # "-m limit --limit 6/h --limit-burst 5" (or similar) before each -j LOG.
   # 
   # Any udp not already allowed is logged and then dropped. 
   iptables -A INPUT  -i $IFACE -p udp -j LOG --log-prefix "IPTABLES UDP-IN: " 
   iptables -A INPUT  -i $IFACE -p udp -j REJECT 
   iptables -A OUTPUT -o $IFACE -p udp -j LOG --log-prefix "IPTABLES UDP-OUT: " 
   iptables -A OUTPUT -o $IFACE -p udp -j REJECT 
   # Any icmp not already allowed is logged and then dropped. 
   iptables -A INPUT  -i $IFACE -p icmp -j LOG --log-prefix "IPTABLES ICMP-IN: " 
   iptables -A INPUT  -i $IFACE -p icmp -j REJECT 
   iptables -A OUTPUT -o $IFACE -p icmp -j LOG --log-prefix "IPTABLES ICMP-OUT: " 
   iptables -A OUTPUT -o $IFACE -p icmp -j REJECT 
   # Any tcp not already allowed is logged and then dropped. 
   iptables -A INPUT  -i $IFACE -p tcp -j LOG --log-prefix "IPTABLES TCP-IN: " 
   iptables -A INPUT  -i $IFACE -p tcp -j REJECT 
   iptables -A OUTPUT -o $IFACE -p tcp -j LOG --log-prefix "IPTABLES TCP-OUT: " 
   iptables -A OUTPUT -o $IFACE -p tcp -j REJECT 
   # Anything else not already allowed is logged and then dropped. 
   iptables -A INPUT  -i $IFACE -j LOG --log-prefix "IPTABLES PROTOCOL-X-IN: " 
   iptables -A INPUT  -i $IFACE -j REJECT 
   iptables -A OUTPUT -o $IFACE -j LOG --log-prefix "IPTABLES PROTOCOL-X-OUT: " 
   iptables -A OUTPUT -o $IFACE -j REJECT 

   # THE END 
   # ==================================================================

   echo "done"
}


## =========================================================== 
## Some definitions: 

BROADCAST="255.255.255.0"
LOOPBACK="127.0.0.0/8" 
CLASS_A="10.0.0.0/8" 
CLASS_B="172.16.0.0/12" 
CLASS_C="192.168.0.0/16" 
CLASS_D_MULTICAST="224.0.0.0/4" 
CLASS_E_RESERVED_NET="240.0.0.0/4" 
P_PORTS="0:1023" 
UP_PORTS="1024:65535" 
TR_SRC_PORTS="32769:65535" 
TR_DEST_PORTS="33434:33523"

## LOOPBACK 
# Allow unlimited traffic on the loopback interface. 
echo -n 'Configuring lo... '
iptables -A INPUT  -i lo -j ACCEPT 
iptables -A OUTPUT -o lo -j ACCEPT 
echo 'done'
echo -n 'Configuring tun0... '
iptables -A INPUT  -i tun0 -j ACCEPT
iptables -A OUTPUT -o tun0 -j ACCEPT
iptables -A FORWARD -i tun0 -j ACCEPT
echo 'done'

echo -n 'Configuring tun1... '
iptables -A INPUT  -i tun1 -j ACCEPT
iptables -A OUTPUT -o tun1 -j ACCEPT
iptables -A FORWARD -i tun1 -j ACCEPT
echo 'done'

# Setup eth0:
IFACE="eth0"
IPADDR="$(ifconfig eth0 | perl -ne 'if (/inet addr:((\d{1,3}\.){3}\d{1,3})/) { print $1; }')"
setrules

echo "Done committing new configuration."
echo

save_script="/etc/init.d/iptables"
if [ -x $save_script ]; then
   echo 'Saving new configuration'
   $save_script save
fi

echo
echo "$0 script finished."

# vi:incsearch:nowrap:ai
